 set-option -sa terminal-overrides ",xterm*:Tc"
 
set -g @catppuccin_flavour 'latte'
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'christoomey/vim-tmux-navigator'
# set -g @plugin 'catppuccin/tmux'
set -g @plugin 'dreamsofcode-io/catppuccin-tmux'
# TODO: check if this is already done in some of the configs below
set -g @plugin 'tmux-plugins/tmux-yank'

# this should be previouslye cloned from https://github.com/tmux-plugins/tpm
# TODO: fix this
run "~/.tmux/plugins/tpm/tpm"

set -g repeat-time 1000

# Shift+Alt vim keys to switch windows
bind -n M-H previous-window
bind -n M-L next-window

### General config

## Mouse
set -g mouse on

## Command history
set -g history-limit 102400

## Windows management
# By default, tmux will number panes and windows starting from 0. I find indexing things from 1 to be more ergonomic, especially when you want to quickly switch between windows.
set -g base-index 1
setw -g pane-base-index 1

# By default, after you delete a window tmux will remember the previous index of the other windows. Why? I dunno, but this gets rid of it.
set -g renumber-windows on

## Keys modes
# Use emacs keybindings in the status line
set-option -g status-keys emacs

# Use vim keybindings in copy mode
setw -g mode-keys vi

# Fix ESC delay in vim
set -g escape-time 10

### Key Bindings
## Prefix 
# The prefix is the entry point to each command you’re going to use. I chose Ctrl-a because it’s easier to press with my left hand.
unbind C-b
set -g prefix C-Space

# Since we set Ctrl-a to be our prefix, it will be intercepted by tmux and won’t be forwarded to any program. With this setting, we can press it twice to send it through anyways.
bind C-Space send-prefix

# In tmux, you can enter navigation mode by pressing Ctrl-a [. Once you’re in that mode, you can navigate the buffer as if you were inside a VIM buffer. Now you can:
# 
# search for things with /; find next matches with n and previous matches with N.
# start a visual selection with v; you can switch to rectangle mode with Ctrl-v.
# copy the visual selection into your OS clipboard with y; this will automatically cancel the selection. The same works by just highlighting text with your mouse.
# Copy mode
# unbind-key -T copy-mode-vi v

bind-key -T copy-mode-vi v send-keys -X begin-selection

bind-key -T copy-mode-vi 'C-v' send-keys -X rectangle-toggle

bind-key -T copy-mode-vi y send-keys -X copy-selection-and-cancel

# bind-key -T copy-mode-vi y \
  # send-keys -X copy-pipe-and-cancel "pbcopy"

bind-key -T copy-mode-vi MouseDragEnd1Pane \
  send-keys -X copy-pipe-and-cancel "pbcopy"

## Quick reload
bind r source-file ~/.tmux.conf \; display "Config reloaded!"


## More windows management
# Press Ctrl-a c to open a new window with the same path.
bind c new-window -c '#{pane_current_path}'

# Use Ctrl-a \ to open a vertical split (it’s the same key with the | symbol). Use Ctrl-a - to open a horizontal split.
bind '\' split-window -h -c '#{pane_current_path}'
bind - split-window -v -c '#{pane_current_path}'

# Press Ctrl-a b to break the current pane into a new window.
bind b break-pane -d

# Another shortcut I use all the time is Ctrl-a z to expand the current pane full-screen. Press it again to return to your previous pane configuration.

### Vim integration
# You can switch between the last two panes by repeatedly pressing Ctrl-\.
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l


### Status Bar
# set-option -g status-justify left
# set-option -g status-left '#[bg=colour72] #[bg=colour237] #[bg=colour236] #[bg=colour235]#[fg=colour185] #S #[bg=colour236] '
# set-option -g status-left-length 16
# set-option -g status-bg colour237
# set-option -g status-right '#[bg=colour236] #[bg=colour235]#[fg=colour185] %a %R #[bg=colour236]#[fg=colour3] #[bg=colour237] #[bg=colour72] #[]'
# set-option -g status-interval 60

# set-option -g pane-active-border-style fg=colour246
# set-option -g pane-border-style fg=colour238

# set-window-option -g window-status-format '#[bg=colour238]#[fg=colour107] #I #[bg=colour239]#[fg=colour110] #[bg=colour240]#W#[bg=colour239]#[fg=colour195]#F#[bg=colour238] '
# set-window-option -g window-status-current-format '#[bg=colour236]#[fg=colour215] #I #[bg=colour235]#[fg=colour167] #[bg=colour234]#W#[bg=colour235]#[fg=colour195]#F#[bg=colour236] '
